name: 'Terraform'

on:
  push:
    branches: [ "dev" ]
  pull_request:
  workflow_dispatch:
    inputs:
      terraform_action:
        type: choice
        description: Action to perform
        default: Apply
        options: 
        - Apply
        - Destroy
      VAR_FILE:
        description: 'Terraform variable file'
        required: true
        default: identity_resources.tfvars
        type: string
      STATE_FILE:
        description: 'Terraform State file Name'
        required: true
        default: identity.tfstate
        type: string

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    environment: plan

    outputs:
      tf_var_file: ${{ steps.tf_var.outputs.tf_var_file }}
      tf_state_file: ${{ steps.tf_var.outputs.tf_state_file }}

    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Set default value
      id: tf_var
      run: |
        var_file=${{ github.event.inputs.VAR_FILE }}
        echo "::set-output name=tf_var_file::${var_file:-"connectivity_resources.tfvars"}"
        state_file=${{ github.event.inputs.STATE_FILE }}
        echo "::set-output name=tf_state_file::${state_file:-"connectivity.tfstate"}"
        action=${{ github.event.inputs.terraform_action }}
        echo "::set-output name=tf_action::${action:-"Apply"}"

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2.0.3
    
    - name: Azure login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Terraform Init
      env:
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_BACKEND_CONTAINER: "tfstate" 
        ARM_BACKEND_STORAGE_ACCOUNT: "sterranwmgmtsa"
        ARM_BACKEND_STORAGE_ACCOUNT_RG: "rg-err-anw-mgmt-mgmt"
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      run: |
          container_exists=$(az storage container exists --account-name $ARM_BACKEND_STORAGE_ACCOUNT --subscription $ARM_SUBSCRIPTION_ID --name $ARM_BACKEND_CONTAINER --query exists)   
          container_exists="${container_exists%\"}"
          container_exists="${container_exists#\"}"
          if [ "$container_exists" == "false" ]; then
            az storage container create --subscription "$ARM_SUBSCRIPTION_ID" --name "$ARM_BACKEND_CONTAINER" --public-access off
          fi
          terraform init \
            -backend-config="storage_account_name=$ARM_BACKEND_STORAGE_ACCOUNT" \
            -backend-config="container_name=$ARM_BACKEND_CONTAINER" \
            -backend-config="key=mgmt/${{ steps.tf_var.outputs.tf_state_file }}" \
            -backend-config="resource_group_name=$ARM_BACKEND_STORAGE_ACCOUNT_RG" \
            -backend-config="subscription_id=$ARM_SUBSCRIPTION_ID" \
            -reconfigure
    
    - name: Terraform Plan
      if: "${{ steps.tf_var.outputs.tf_action == 'Apply' }}"
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_CLIENT_SECRETE: ${{ secrets.AZURE_CLIENT_SECRET }}
      run: |
          terraform plan -out tfplan.out -var-file ${{ steps.tf_var.outputs.tf_var_file }} -input=false

    - name: Terraform Plan
      if: "${{ steps.tf_var.outputs.tf_action == 'Destroy' }}"
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_CLIENT_SECRETE: ${{ secrets.AZURE_CLIENT_SECRET }}
      run: |
          terraform plan -out tfplan.out -destroy -var-file ${{ steps.tf_var.outputs.tf_var_file }} -input=false     
           
    - uses: actions/upload-artifact@v4
      with:
        name: tf-plan
        path: tfplan.out
  Apply:
    needs: terraform
    name: Terraform Apply
    runs-on: ubuntu-latest
    environment: apply
    if: github.ref == 'refs/heads/dev'
    steps:
    - uses: actions/download-artifact@v4
      with:
        name: tf-plan
        path: /tmp

    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2.0.3
    
    - name: Azure login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Terraform Init
      env:
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_BACKEND_CONTAINER: "tfstate" 
        ARM_BACKEND_STORAGE_ACCOUNT: "sterranwmgmtsa"
        ARM_BACKEND_STORAGE_ACCOUNT_RG: "rg-err-anw-mgmt-mgmt"
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      run: |
          container_exists=$(az storage container exists --account-name $ARM_BACKEND_STORAGE_ACCOUNT --subscription $ARM_SUBSCRIPTION_ID --name $ARM_BACKEND_CONTAINER --query exists)   
          container_exists="${container_exists%\"}"
          container_exists="${container_exists#\"}"
          if [ "$container_exists" == "false" ]; then
            az storage container create --subscription "$ARM_SUBSCRIPTION_ID" --name "$ARM_BACKEND_CONTAINER" --public-access off
          fi
          terraform init \
            -backend-config="storage_account_name=$ARM_BACKEND_STORAGE_ACCOUNT" \
            -backend-config="container_name=$ARM_BACKEND_CONTAINER" \
            -backend-config="key=mgmt/${{ needs.terraform.outputs.tf_state_file }}" \
            -backend-config="resource_group_name=$ARM_BACKEND_STORAGE_ACCOUNT_RG" \
            -backend-config="subscription_id=$ARM_SUBSCRIPTION_ID" \
            -reconfigure

    - name: Terraform Apply
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      run: |
          terraform apply -auto-approve -input=false /tmp/tfplan.out 
